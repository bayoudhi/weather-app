{"version":3,"sources":["components/Weather.js","components/SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","weather","date","className","name","sys","country","main","temp","SearchBar","handleChange","onChange","e","target","value","type","placeholder","api","createWeatherAPI","App","useState","setWeather","loading","setLoading","error","setError","debounceSearch","useRef","debounce","cityName","getWeatherByCityName","units","then","catch","message","current","Date","toLocaleString","color","height","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kRA2BeA,MAlBf,YAAqC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAC1B,OACE,gCACE,sBAAKC,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGF,EAAQG,KADX,KACmBH,EAAQI,IAAIC,WAE/B,qBAAKH,UAAU,OAAf,SAAuBD,OAEzB,sBAAKC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBF,EAAQM,KAAKC,KAApC,WAEA,qBAAKL,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGM,c,MCAtCE,MAbf,YAAsC,IAAjBC,EAAgB,EAAhBA,aACnB,OACE,qBAAKP,UAAU,aAAf,SACE,uBACEQ,SAAU,SAACC,GAAD,OAAOF,EAAaE,EAAEC,OAAOC,QACvCC,KAAK,OACLZ,UAAU,aACVa,YAAY,iBCPdC,EAAMC,2BAAiB,oCAmFdC,MAjFf,WAAgB,IAAD,EACiBC,mBAAS,MAD1B,mBACNnB,EADM,KACGoB,EADH,OAEiBD,oBAAS,GAF1B,mBAENE,EAFM,KAEGC,EAFH,OAGaH,mBAAS,MAHtB,mBAGNI,EAHM,KAGCC,EAHD,KAYPC,EAAiBC,iBACrBC,oBAAS,SAACC,GACJA,EACFZ,EACGa,qBAAqB,CACpBD,WACAE,MAAO,WAERC,MAAK,SAAC/B,GACLoB,EAAWpB,GACXsB,GAAW,GACXE,EAAS,SAEVQ,OAAM,SAACT,GACND,GAAW,GACXE,EAASD,EAAMU,aAMnBX,GAAW,GACXE,EAAS,SAEV,MACHU,QAYF,OACE,qBACEhC,UACEF,GAAWA,EAAQM,KAAKC,KAAO,GAAK,WAAsB,MAF9D,SAKE,iCACE,cAAC,EAAD,CAAWE,aAnDI,SAACmB,GACpBN,GAAW,GACXE,EAAS,MACTJ,EAAW,MACXK,EAAeG,MAgDV5B,GACC,cAAC,EAAD,CAASA,QAASA,EAASC,MAAM,IAAIkC,MAAOC,mBAG7Cf,GACC,cAAC,IAAD,CACEnB,UAAU,UACVY,KAAK,kBACLuB,MAAM,UACNC,OAAQ,MACRC,MAAO,QAIVhB,GACC,qBAAKrB,UAAU,YAAf,SACE,qBAAKA,UAAU,QAAf,SAjCM,wCAAVqB,EACK,oBAEK,kBAAVA,EACK,iCAEF,4CC5CIiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.608acc24.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"./Weather.css\";\n\n/**\n *\n * @param {Object} Props\n * @param {Weather} Props.weather\n * @param {string} Props.date\n */\nfunction Weather({ weather, date }) {\n  return (\n    <div>\n      <div className=\"location-box\">\n        <div className=\"location\">\n          {weather.name}, {weather.sys.country}\n        </div>\n        <div className=\"date\">{date}</div>\n      </div>\n      <div className=\"weather-box\">\n        <div className=\"temp\">{weather.main.temp}Â°c</div>\n\n        <div className=\"weather\">{weather.weather[0].main}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Weather;\n","import * as React from \"react\";\nimport \"./SearchBar.css\";\n\n/**\n * SearchBar Component\n * @param {Object} Props\n * @param {Function} Props.handleChange\n */\nfunction SearchBar({ handleChange }) {\n  return (\n    <div className=\"search-box\">\n      <input\n        onChange={(e) => handleChange(e.target.value)}\n        type=\"text\"\n        className=\"search-bar\"\n        placeholder=\"Search...\"\n      />\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import { useRef, useState } from \"react\";\nimport ReactLoading from \"react-loading\";\nimport { debounce } from \"lodash\";\nimport { createWeatherAPI } from \"openweatherapi-js-sdk\";\nimport Weather from \"./components/Weather\";\nimport SearchBar from \"./components/SearchBar\";\nimport * as React from \"react\";\n\nconst api = createWeatherAPI(\"69cac80f1588f11748c177dbbdbb44dc\");\n\nfunction App() {\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const handleChange = (cityName) => {\n    setLoading(true);\n    setError(null);\n    setWeather(null);\n    debounceSearch(cityName);\n  };\n\n  const debounceSearch = useRef(\n    debounce((cityName) => {\n      if (cityName)\n        api\n          .getWeatherByCityName({\n            cityName,\n            units: \"metric\",\n          })\n          .then((weather) => {\n            setWeather(weather);\n            setLoading(false);\n            setError(null);\n          })\n          .catch((error) => {\n            setLoading(false);\n            setError(error.message);\n            // Possible Errors\n            // Network Error\n            // Request failed with status code 404\n          });\n      else {\n        setLoading(false);\n        setError(null);\n      }\n    }, 500)\n  ).current;\n\n  const renderErrorMessage = () => {\n    if (error === \"Request failed with status code 404\") {\n      return \"City not found :(\";\n    }\n    if (error === \"Network Error\") {\n      return \"Check your internet connection\";\n    }\n    return \"Something wrong is heppening :(\";\n  };\n\n  return (\n    <div\n      className={\n        weather ? (weather.main.temp > 16 ? \"app warm\" : \"app\") : \"app\"\n      }\n    >\n      <main>\n        <SearchBar handleChange={handleChange} />\n        {weather && (\n          <Weather weather={weather} date={new Date().toLocaleString()} />\n        )}\n\n        {loading && (\n          <ReactLoading\n            className=\"loading\"\n            type=\"spinningBubbles\"\n            color=\"#ffffff\"\n            height={\"10%\"}\n            width={\"10%\"}\n          />\n        )}\n\n        {error && (\n          <div className=\"error-box\">\n            <div className=\"error\">{renderErrorMessage()}</div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}